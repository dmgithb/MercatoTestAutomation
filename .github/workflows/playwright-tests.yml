name: üß™ Playwright Tests CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - critical
        - smoke
        - regression
        - auth
        - homepage
        - category
      browser:
        description: 'Browser to test'
        required: true
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - all

env:
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

jobs:
  # Job 1: Setup and Lint
  setup:
    name: üîß Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-node-modules.outputs.cache-hit }}
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üìã Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: üì• Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: üîç TypeScript check
        run: npx tsc --noEmit

      - name: üìä Test configuration validation
        run: npx playwright test --list

  # Job 2: Critical Tests (Fast feedback)
  critical-tests:
    name: üö® Critical Tests
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' && (github.event.inputs.test_suite == 'critical' || github.event.inputs.test_suite == 'all')
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.browser != 'all' && fromJSON(format('["{0}"]', github.event.inputs.browser)) || fromJSON('["chromium"]') }}
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üìã Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: üé≠ Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: üö® Run critical tests
        run: npx playwright test --grep "@critical" --project=${{ matrix.browser }}
        env:
          CI: true
          SKIP_GLOBAL_SETUP: true

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: critical-test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Job 3: Full Test Suite
  full-tests:
    name: üß™ Full Test Suite
    runs-on: ubuntu-latest
    needs: [setup, critical-tests]
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'all'
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.browser == 'all' && fromJSON('["chromium", "firefox", "webkit"]') || github.event_name == 'workflow_dispatch' && github.event.inputs.browser != 'all' && fromJSON(format('["{0}"]', github.event.inputs.browser)) || fromJSON('["chromium", "firefox", "webkit"]') }}
        shard: [1/3, 2/3, 3/3]
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üìã Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: üé≠ Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: üß™ Run all tests
        run: npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}
        env:
          CI: true

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ strategy.job-index }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # Job 4: Smoke Tests (Quick validation)
  smoke-tests:
    name: üí® Smoke Tests
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'smoke'
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üìã Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: üé≠ Install Playwright browsers
        run: npx playwright install --with-deps ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.browser != 'all' && github.event.inputs.browser || 'chromium' }}

      - name: üí® Run smoke tests
        run: npx playwright test --grep "@smoke" --project=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.browser != 'all' && github.event.inputs.browser || 'chromium' }}

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            playwright-report/
            test-results/

  # Job 5: Category-specific Tests (Manual trigger)
  category-tests:
    name: üóÇÔ∏è Category Tests
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'workflow_dispatch' && (github.event.inputs.test_suite == 'auth' || github.event.inputs.test_suite == 'homepage' || github.event.inputs.test_suite == 'category')
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üìã Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: üé≠ Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: üß™ Run category tests
        run: |
          if [ "${{ github.event.inputs.test_suite }}" == "auth" ]; then
            npx playwright test --grep "TC-AUTH" --project=chromium
          elif [ "${{ github.event.inputs.test_suite }}" == "homepage" ]; then
            npx playwright test --grep "TC-HOME" --project=chromium
          elif [ "${{ github.event.inputs.test_suite }}" == "category" ]; then
            npx playwright test --grep "TC-CAT" --project=chromium
          fi
        env:
          CI: true

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ github.event.inputs.test_suite }}-test-results
          path: |
            playwright-report/
            test-results/

  # Job 6: Test Report Generation
  generate-report:
    name: üìä Generate Test Report
    runs-on: ubuntu-latest
    needs: [critical-tests, full-tests]
    if: always()
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
      - name: üìä Generate consolidated report
        run: |
          echo "# üß™ Test Execution Report" > test-summary.md
          echo "Generated on: $(date)" >> test-summary.md
          echo "" >> test-summary.md
          
          # Count test files
          if [ -d "critical-test-results-chromium" ]; then
            echo "## Critical Tests Results" >> test-summary.md
            echo "- Status: ‚úÖ Passed" >> test-summary.md
          fi
          
          if [ -d "test-results-chromium-0" ]; then
            echo "## Full Test Suite Results" >> test-summary.md
            echo "- Cross-browser testing completed" >> test-summary.md
          fi

      - name: üì§ Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: test-execution-summary
          path: test-summary.md
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [critical-tests, full-tests]
    if: always()
    steps:
      - name: üîç Check job results
        run: |
          echo "Critical tests result: ${{ needs.critical-tests.result }}"
          echo "Full tests result: ${{ needs.full-tests.result }}"
          echo "Event name: ${{ github.event_name }}"

      - name: üì¢ Slack notification - Success
        if: needs.critical-tests.result == 'success' && needs.full-tests.result == 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "channel": "#test-automation",
                "username": "GitHub Actions",
                "icon_emoji": ":white_check_mark:",
                "attachments": [
                  {
                    "color": "good",
                    "title": "‚úÖ Playwright Tests PASSED",
                    "fields": [
                      {
                        "title": "Branch",
                        "value": "${{ github.ref_name }}",
                        "short": true
                      },
                      {
                        "title": "Author", 
                        "value": "${{ github.actor }}",
                        "short": true
                      },
                      {
                        "title": "Workflow",
                        "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                        "short": false
                      }
                    ],
                    "text": "üìä All tests completed successfully!\n\nüìã Test Summary:\n‚Ä¢ Critical Tests: ‚úÖ Passed\n‚Ä¢ Full Test Suite: ‚úÖ Passed\n‚Ä¢ Browsers: Chrome, Firefox, Safari, Edge + Mobile"
                  }
                ]
              }' \
              "$SLACK_WEBHOOK_URL"
          else
            echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not configured - skipping success notification"
          fi

      - name: üì¢ Slack notification - Failure  
        if: needs.critical-tests.result == 'failure' || needs.full-tests.result == 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "channel": "#test-automation", 
                "username": "GitHub Actions",
                "icon_emoji": ":x:",
                "attachments": [
                  {
                    "color": "danger",
                    "title": "‚ùå Playwright Tests FAILED",
                    "fields": [
                      {
                        "title": "Branch",
                        "value": "${{ github.ref_name }}",
                        "short": true
                      },
                      {
                        "title": "Author",
                        "value": "${{ github.actor }}",
                        "short": true
                      },
                      {
                        "title": "Critical Tests",
                        "value": "${{ needs.critical-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
                        "short": true
                      },
                      {
                        "title": "Full Test Suite", 
                        "value": "${{ needs.full-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
                        "short": true
                      },
                      {
                        "title": "Action Required",
                        "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|üîç Check Details>",
                        "short": false
                      }
                    ],
                    "text": "üö® Immediate attention required!"
                  }
                ]
              }' \
              "$SLACK_WEBHOOK_URL"
          else
            echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not configured - skipping failure notification"
          fi

      - name: üì¢ Slack notification - Manual Trigger
        if: github.event_name == 'workflow_dispatch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            # Determine overall status
            OVERALL_STATUS="success"
            if [[ "${{ needs.critical-tests.result }}" == "failure" || "${{ needs.full-tests.result }}" == "failure" ]]; then
              OVERALL_STATUS="failure"
            fi
            
            # Set color and status text based on results
            if [[ "$OVERALL_STATUS" == "success" ]]; then
              COLOR="good"
              STATUS_TEXT="COMPLETED ‚úÖ"
            else
              COLOR="warning" 
              STATUS_TEXT="FAILED ‚ùå"
            fi
            
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "channel": "#test-automation",
                "username": "GitHub Actions",
                "icon_emoji": ":dart:",
                "attachments": [
                  {
                    "color": "'$COLOR'",
                    "title": "üéØ Manual Test Execution - '$STATUS_TEXT'",
                    "fields": [
                      {
                        "title": "Branch",
                        "value": "${{ github.ref_name }}",
                        "short": true
                      },
                      {
                        "title": "Triggered by",
                        "value": "${{ github.actor }}",
                        "short": true
                      },
                      {
                        "title": "Browser",
                        "value": "${{ github.event.inputs.browser || 'all' }}",
                        "short": true
                      },
                      {
                        "title": "Test Suite",
                        "value": "${{ github.event.inputs.test_suite || 'full' }}",
                        "short": true
                      },
                      {
                        "title": "Results",
                        "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                        "short": false
                      }
                    ]
                  }
                ]
              }' \
              "$SLACK_WEBHOOK_URL"
          else
            echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not configured - skipping manual trigger notification"
          fi

      - name: üìã Setup Instructions
        if: always()
        run: |
          echo "üìã To enable Slack notifications:"
          echo "1. Create Slack webhook: https://api.slack.com/apps"
          echo "2. Add SLACK_WEBHOOK_URL to GitHub Secrets: https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo "3. Re-run the workflow"
